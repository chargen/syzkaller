# Copyright 2016 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <linux/types.h>
include <linux/byteorder/generic.h>

syz_emit_ethernet(len len[packet], packet ptr[in, eth_packet])

################################################################################
################################### Ethernet ###################################
################################################################################

# https://en.wikipedia.org/wiki/Ethernet_frame#Structure
# https://en.wikipedia.org/wiki/IEEE_802.1Q

include <uapi/linux/if.h>
include <uapi/linux/if_ether.h>

mac_addr_local {
# This corresponds to LOCAL_MAC in executor/common.h
	a0		array[const[0xaa, int8], 5]
	a1		proc[int8, 0, 1]
} [packed]

mac_addr_remote {
# This corresponds to REMOTE_MAC in executor/common.h
	a0		array[const[0xbb, int8], 5]
	a1		proc[int8, 0, 1]
} [packed]

mac_addr [
	local		mac_addr_local
	remote		mac_addr_remote
	empty		array[const[0x00, int8], 6]
	random		array[int8, 6]
]

vlan_tag_ad {
	tpid		const[0x9100, int16be]
	pcp		int16:3
	dei		int16:1
	vid		int16:12
} [packed]

vlan_tag_q {
	tpid		const[0x8100, int16be]
	pcp		int16:3
	dei		int16:1
	vid		int16:12
} [packed]

vlan_tag {
	tag_ad		array[vlan_tag_ad, 0:1]
	tag_q		vlan_tag_q
} [packed]

eth_packet {
	dst_mac		mac_addr
	src_mac		mac_addr
	vtag		array[vlan_tag, 0:1]
	payload		eth_payload
} [packed]

eth_payload {
	eth2		eth2_packet
} [packed]

################################################################################
################################## Ethernet 2 ##################################
################################################################################

# https://en.wikipedia.org/wiki/Ethernet_frame#Ethernet_II

ether_types = ETH_P_LOOP, ETH_P_PUP, ETH_P_PUPAT, ETH_P_TSN, ETH_P_IP, ETH_P_X25, ETH_P_ARP, ETH_P_IEEEPUP, ETH_P_IEEEPUPAT, ETH_P_BATMAN, ETH_P_DEC, ETH_P_DNA_DL, ETH_P_DNA_RC, ETH_P_DNA_RT, ETH_P_LAT, ETH_P_DIAG, ETH_P_CUST, ETH_P_SCA, ETH_P_TEB, ETH_P_RARP, ETH_P_ATALK, ETH_P_AARP, ETH_P_8021Q, ETH_P_IPX, ETH_P_IPV6, ETH_P_PAUSE, ETH_P_SLOW, ETH_P_WCCP, ETH_P_MPLS_UC, ETH_P_MPLS_MC, ETH_P_ATMMPOA, ETH_P_PPP_DISC, ETH_P_PPP_SES, ETH_P_LINK_CTL, ETH_P_ATMFATE, ETH_P_PAE, ETH_P_AOE, ETH_P_8021AD, ETH_P_802_EX1, ETH_P_TIPC, ETH_P_MACSEC, ETH_P_8021AH, ETH_P_MVRP, ETH_P_1588, ETH_P_NCSI, ETH_P_PRP, ETH_P_FCOE, ETH_P_TDLS, ETH_P_FIP, ETH_P_80221, ETH_P_HSR, ETH_P_LOOPBACK, ETH_P_QINQ1, ETH_P_QINQ2, ETH_P_QINQ3, ETH_P_EDSA, ETH_P_AF_IUCV, ETH_P_802_3_MIN

eth2_packet {
	etype		flags[ether_types, int16be]
	payload		eth2_payload
} [packed]

eth2_payload {
	dummy		array[int8, 0:128]
} [packed]
